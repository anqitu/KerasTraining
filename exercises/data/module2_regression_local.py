# -*- coding: utf-8 -*-
"""Module2_regression_local.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZmYmdIGkLGridYOIPQUfT0ExIJ0OD34F
"""

import pandas as pd

from sklearn.preprocessing import MinMaxScaler

# ls

# Load the data
training_data_df = pd.read_csv('sales_data_training.csv')

training_data_df.head()

# Scale the data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_training = scaler.fit_transform(training_data_df)

scaled_training

scaled_training_df = pd.DataFrame(scaled_training,columns=training_data_df.columns.values)
#scaled_training_df.to_csv('./data/sales_training_scaled.csv',index=False)

scaled_training_df.head()

scaled_training_df.describe()

# scaled_training_df['total_earnings']

X = scaled_training_df.drop('total_earnings',axis=1).values
y = scaled_training_df[['total_earnings']].values

import keras

from keras.models import Sequential
from keras.layers import Dense

model = Sequential()
model.add(Dense(50,input_dim=9,activation='relu'))
model.add(Dense(100,activation='relu'))
model.add(Dense(200,activation='relu'))
model.add(Dense(1,activation='linear'))

# model.summary()

model.compile(loss='mean_squared_error',optimizer='adam')

history = model.fit(X,y,epochs=50,shuffle=True, validation_split = 0.2, verbose = 0)

scale = scaler.scale_[8]

scaler.scale_

scaler.min_

min = scaler.min_[8]

import numpy as np
X_single = np.array([[0.5,1,1,1,0,1,0,1,1]])

X_single

yhat= model.predict(X_single)

yhat

(yhat/scale)+min

import matplotlib.pyplot as plt
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1,len(loss)+1)

# loss

plt.plot(epochs, loss,'b',label='Train MSE')
plt.plot(epochs, val_loss,'r',label='Val MSE')
plt.legend()
plt.show()

plt.plot(epochs[10:], loss[10:],'b',label='Train MSE')
plt.plot(epochs[10:], val_loss[10:],'r',label='Val MSE')
plt.legend()
plt.show()

"""# Evaluate using Test"""

# Load the data
testing_data_df = pd.read_csv('sales_data_testing.csv')

scaled_testing= scaler.transform(testing_data_df)

scaled_testing_df = pd.DataFrame(scaled_testing,columns=training_data_df.columns.values)

X_test = scaled_testing_df.drop('total_earnings',axis=1).values
y_test = scaled_testing_df[['total_earnings']].values

y_pred= model.predict(X_test)
# y_pred

from sklearn.metrics import mean_squared_error
mean_squared_error(y_pred, y_test) ** 0.5

from sklearn.metrics import r2_score
r2_score(y_pred, y_test)

y_pred_inv = (y_pred/scale)+min

y_test_inv = (y_test/scale)+min

mean_squared_error(y_pred_inv, y_test_inv) ** 0.5

r2_score(y_pred_inv, y_test_inv)

"""# Save Model"""

model.save('regression.h5')

from keras.models import load_model

model = load_model('regression.h5')
